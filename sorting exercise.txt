//#1 - Sort 10 schools around your house by distance:
first of all we have to consider that we dont' have just numbers,
but an object, or structs, that contains the distance element.
To sort just ten we could use insertion sort if they would be near each other. 
If we should to sort 10 schools in the same municipality, or even town if it is a small one,
we could use insertion sort. But if the schools would we distance each other, and thus not almost sorted,
we could use something with a Big O notation of n log n, like mergesort

solution: insertion sort

//#2 - eBay sorts listings by the current Bid amount:
quick sort 

solution: radix or counting
//#3 - Sport scores on ESPN
quicksort

solution: quick sort

//#4 - Massive database (can't fit all into memory) needs to sort through past year's user data
we should use something with low space complexity, a quick sort is bad for this kind of sorting,
so a merge sort would be better

solution: merge sort

//#5 - Almost sorted Udemy review data needs to update and add 2 new reviews
insertion sort is the best sorting algotihms for almost sorted data

solution: insertion sort

//#6 - Temperature Records for the past 50 years in Canada
quick sort would be a good choice if we have enough time complexity even because 
if the temperature haven't changed much we have almost no risk for the worst case.

solution: radix or counting sort if are all integers, if are decimals quick sort

//#7 - Large user name database needs to be sorted. Data is very random.
Ideally we could use the quicksort, but because is very high in this case the risk of a worst case 
it would be better to use a merge sort

solution: mergesort if we have anough memory quick sort if we don't worry about time complexity

//#8 - You want to teach sorting for the first time
Something basic with bubble sort for then going with the selection sort,
so that we can set the basics.